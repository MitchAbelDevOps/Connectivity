name: 'nsgs-tewheke-workflow'

on:
  workflow_dispatch: # Trigger manually via GitHub Actions interface

jobs:
  dev:
    name: 'Development'
    runs-on: ubuntu-latest
    environment: dev

    permissions:
      id-token: write # Required for OIDC authentication
      contents: read  # To access repository files if needed

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Copy Specific Files to Root Directory
    # TODO make file path a param
    - name: Prepare Terraform Files
      run: |
        cp rg-networking-tewheke/Infrastructure/Network\ Security\ Group/main.tf rg-networking-tewheke/Infrastructure/
        cp rg-networking-tewheke/Infrastructure/Network\ Security\ Group/variables.tf rg-networking-tewheke/Infrastructure/
        cp rg-networking-tewheke/Infrastructure/Network\ Security\ Group/Variables/dev.tfvars rg-networking-tewheke/Infrastructure/dev.tfvars

    # Login to Azure using OIDC
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Retrieve Storage account key, change to MSI?
    - name: Get Terraform Storage Account Key
      id: get-key
      uses: azure/cli@v2
      with:
        inlineScript: |
          key=$(az storage account keys list -g "rg-integrationmanagement-aue" -n "saterraformstateauedev" --query [0].value -o tsv)
          echo "TF_STORAGE_ACCOUNT_KEY=$key" >> $GITHUB_ENV

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'

    # # Set environment variables dynamically
    # - name: Set Environment Variables
    #   run: echo "TF_VAR_location=${{ vars.AZURE_LOCATION }}" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # TODO make key a param
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="storage_account_name=saterraformstateauedev" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=nsgs-tewheke.tfstate" \
          -backend-config="access_key=${TF_STORAGE_ACCOUNT_KEY}"
      working-directory: 'rg-networking-tewheke/Infrastructure'

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Add TF Validate?

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform plan \
          -input=false \
          -var-file="dev.tfvars" \
          -out=deployment.tfplan
      working-directory: 'rg-networking-tewheke/Infrastructure'

    #   # On push to "main", build or change infrastructure according to Terraform configuration files
    #   # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    # - name: Terraform Apply
    #   run: terraform apply -auto-approve -input=false

    # Clean Up Temporary Files
    - name: Clean Up Terraform Files
      if: always()
      run: |
        rm -f rg-networking-tewheke/Infrastructure/main.tf
        rm -f rg-networking-tewheke/Infrastructure/variables.tf
        rm -f rg-networking-tewheke/Infrastructure/dev.tfvars
